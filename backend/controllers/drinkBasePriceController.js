// backend/controllers/drinkBasePriceController.js
const DrinkBasePrice = require("../models/drinkBasePriceModel");

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
function tempKey(temperature) {
  if (!temperature) return null;
  const t = String(temperature).trim();
  if (["‡∏£‡πâ‡∏≠‡∏ô", "hot", "HOT"].includes(t)) return "hot";
  if (["‡πÄ‡∏¢‡πá‡∏ô", "cold", "COLD"].includes(t)) return "cold";
  if (["‡∏õ‡∏±‡πà‡∏ô", "blend", "BLEND"].includes(t)) return "blend";
  return t.toLowerCase();
}

function toNumber(n) {
  const v = Number(n);
  return Number.isFinite(v) ? v : null;
}

// üìã ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö raw
exports.getAllDrinkBasePricesRaw = async (req, res) => {
  try {
    const rows = await DrinkBasePrice.getAll();
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìã ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ (map)
exports.getAllDrinkBasePrices = async (req, res) => {
  try {
    const rows = await DrinkBasePrice.getAll(); // expect: drink_id, temperature, base_price
    const map = {};

    for (const r of rows) {
      const id = String(r.drink_id);
      const tk = tempKey(r.temperature);
      const price = toNumber(r.base_price);

      if (!map[id]) map[id] = { name: id, hot: null, cold: null, blend: null };
      if (tk && price != null) map[id][tk] = price;
    }

    res.json(map);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ê‡∏≤‡∏ô
exports.addDrinkBasePrice = async (req, res) => {
  try {
    const { drink_id, temperature, base_price } = req.body;
    if (!drink_id || !temperature || base_price == null) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    }
    const result = await DrinkBasePrice.create(drink_id, temperature, base_price);
    res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ê‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", insertId: result.insertId });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ê‡∏≤‡∏ô
exports.updateDrinkBasePrice = async (req, res) => {
  try {
    const { drink_id, temperature } = req.params;
    const { base_price } = req.body;
    if (!drink_id || !temperature || base_price == null) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    }

    const result = await DrinkBasePrice.update(drink_id, temperature, base_price);
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ê‡∏≤‡∏ô
exports.deleteDrinkBasePrice = async (req, res) => {
  try {
    const { drink_id, temperature } = req.params;
    const result = await DrinkBasePrice.remove(drink_id, temperature);
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    res.json({ message: "‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
